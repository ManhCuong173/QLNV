{"version":3,"sources":["logo.svg","components/TitleSection/index.jsx","features/components/EmpLeftBody/index.jsx","constant/tableActions.js","recoil/formState.js","features/components/TableContent/index.jsx","recoil/dataState.js","utils/convertDateString.js","features/components/TableModal/index.jsx","features/components/TableActions/index.jsx","features/components/EmpRightBody/index.jsx","components/Navbar/index.jsx","features/pages/Employee/index.jsx","App.js","serviceWorker.js","index.js","constant/formFields.js"],"names":["module","exports","TitleSection","props","className","style","children","category","EmpLeftBody","fontSize","padding","color","backgroundColor","borderRadius","fontWeight","dataSource","renderItem","item","Item","actionTypes","actionLabels","EMP__ADD","EMP__COPY","EMP__EDIT","require","atom","selector","dataForm","excludeField","initialDataForm","key","default","newFormState","selectedRowsState","TableContent","data","setSelectedRows","useSetRecoilState","rowSelection","useRecoilValue","onChange","selectedRowKeys","selectedRows","onSelect","record","selected","onSelectAll","changeRows","columns","length","map","index","pagination","defaultPageSize","showSizeChanger","bordered","dataState","localStorageData","JSON","parse","localStorage","getItem","sampleData","getSampleData","backUpDataState","convertDateString","dateData","Date","toLocaleDateString","TabPane","Tabs","Form","Option","Select","StyledModal","Typography","Text","styled","Modal","formLayout","labelCol","span","wrapperCol","validateMessage","required","types","email","number","TableModal","React","memo","actionType","isShowModal","closeModal","useRecoilState","formState","useForm","form","dataStorageState","setDataStorageState","useEffect","setFieldsValue","handleCancel","e","Fragment","destroyOnClose","title","visible","onOk","onCancel","width","footer","defaultActiveKey","type","tab","onFinish","values","field","dataArr","Id","idCard","dob","dateIssue","find","error","content","toString","newData","forEach","editData","name","validateMessages","gutter","label","rules","initialValue","labelAlign","disabled","value","moment","listDateFormat","format","TextArea","rows","min","margin","htmlType","onClick","sampleDataState","setSampleDataState","initialForm","setNewFormStateValue","useState","actionTypeState","setActionTypeState","backUpData","setBackUpData","searchLabel","setSearchLabel","setVisible","selectedRowsValue","showModal","clonedData","fieldName","hasOwnProperty","indexOf","clonedDataForm","deleteDataAction","findIndex","slice","deleteData","initialValues","remember","filteredData","isAllowSearch","searchField","fields","empName","empPosition","empBranch","empStatePosition","console","log","filter","toLowerCase","includes","filterData","size","shape","buttonStyle","EmpRightBody","loadDb","setSampleData","borderColor","Navbar","Header","Layout","Content","Employee","flex","App","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","gender","phonenumber","address","area","note","empEmail","placeIssue","subDistrict","dataIndex"],"mappings":"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","file":"static/js/main.b1ec539c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction TitleSection (props) {\r\n  return (\r\n    <div className=\"title\" style={{...props}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TitleSection;\r\n","import React from 'react';\r\nimport TitleSection from '../../../components/TitleSection';\r\nimport {List, Typography} from 'antd';\r\nimport './style.scss';\r\n\r\nconst category = ['Quản lý nhân viên'];\r\n\r\nfunction EmpLeftBody () {\r\n  return (\r\n    <div className=\"emp__content--left-side\">\r\n      <div className=\"emp__content--inner\">\r\n        <TitleSection\r\n          fontSize=\"12px\"\r\n          padding=\".5rem .5rem\"\r\n          color=\"#FFFF\"\r\n          backgroundColor=\"#7dbcea\"\r\n          borderRadius=\"5px\"\r\n          fontWeight=\"bold\"\r\n        >\r\n          Quản lý đối tác\r\n        </TitleSection>\r\n        <List\r\n          className=\"emp__content--list\"\r\n          dataSource={category}\r\n          renderItem={item => (\r\n            <List.Item>\r\n              {item}\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmpLeftBody;\r\n","export const actionTypes = {\r\n  ADD: 'EMP__ADD',\r\n  COPY: 'EMP__COPY',\r\n  EDIT: 'EMP__EDIT',\r\n};\r\n\r\nexport const actionLabels = {\r\n  EMP__ADD: 'Thêm mới nhân viên',\r\n  EMP__COPY: 'Thêm mới nhân viên',\r\n  EMP__EDIT: 'Chỉnh sửa thông tin nhân viên',\r\n};\r\n","import {actionTypes} from '../constant/tableActions';\r\n\r\nconst {atom, selector} = require ('recoil');\r\nconst {dataForm, excludeField} = require ('../constant/formFields');\r\n\r\n// initial form\r\nexport const initialDataForm = atom ({\r\n  key: 'initialForm',\r\n  default: {...dataForm},\r\n});\r\n\r\n// transfered form depend on action type\r\nexport const newFormState = atom ({\r\n  key: 'newFormState',\r\n  default: {...dataForm},\r\n});\r\n\r\nexport const selectedRowsState = atom ({\r\n  key: 'initialSelectedRow',\r\n  default: [],\r\n});\r\n\r\nexport const clonedDataForm = clonedData => {\r\n  let newData = {...clonedData};\r\n  for (const fieldName in newData) {\r\n    if (newData.hasOwnProperty (fieldName)) {\r\n      if (excludeField.indexOf (fieldName) !== -1) {\r\n        newData[fieldName] = '';\r\n      }\r\n    }\r\n  }\r\n  return newData;\r\n};\r\n","import {Table} from 'antd';\r\nimport React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {columns} from '../../../constant/formFields';\r\nimport {initialDataForm, selectedRowsState} from './../../../recoil/formState';\r\nimport './style.scss';\r\n\r\nfunction TableContent (props) {\r\n  // data from local storage\r\n  const {data} = props;\r\n  let dataSource = [];\r\n\r\n  // render data to UI\r\n  const renderData = () => {\r\n    if (data.length > 0) {\r\n      dataSource = data.map ((item, index) => {\r\n        let dataReturn = {...item, key: ++index};\r\n        return dataReturn;\r\n      });\r\n    }\r\n    return dataSource;\r\n  };\r\n\r\n  // selected row initial\r\n  const setSelectedRows = useSetRecoilState (selectedRowsState);\r\n  const initialDataFormLC = useRecoilValue (initialDataForm);\r\n\r\n  // rowSelection objects indicates the need for row selection\r\n  const rowSelection = {\r\n    onChange: (selectedRowKeys, selectedRows) => {\r\n      // console.log (\r\n      //   `selectedRowKeys: ${selectedRowKeys}`,\r\n      //   'selectedRows: ',\r\n      //   selectedRows\r\n      // );\r\n      setSelectedRows (selectedRows);\r\n    },\r\n    onSelect: (record, selected, selectedRows) => {\r\n      // console.log (record, selected, selectedRows);\r\n    },\r\n    onSelectAll: (selected, selectedRows, changeRows) => {\r\n      // console.log (selected, selectedRows, changeRows);\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <Table\r\n        columns={columns}\r\n        rowSelection={{...rowSelection}}\r\n        dataSource={renderData ()}\r\n        pagination={{defaultPageSize: 10, showSizeChanger: true}}\r\n        bordered\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableContent;\r\n","import {atom} from 'recoil';\r\n\r\n// get data from local storage\r\nconst getSampleData = () => {\r\n  const localStorageData = JSON.parse (localStorage.getItem ('sampleData'));\r\n  if (localStorageData) return localStorageData.default.sampleData;\r\n  return [];\r\n};\r\n\r\n// initial data\r\nexport const dataState = atom ({\r\n  key: 'dataFromLS',\r\n  default: getSampleData (),\r\n});\r\n\r\nexport const backUpDataState = atom ({\r\n  key: 'filterData',\r\n  default: [],\r\n});\r\n\r\n// filter data from fields\r\nexport const filterData = (fields, dataArr) => {\r\n  const {empName, empPosition, empBranch, empStatePosition} = fields;\r\n  console.log (dataArr);\r\n  console.log (fields);\r\n  return dataArr.filter (\r\n    data =>\r\n      data.empName.toLowerCase ().includes (empName.toLowerCase ()) &&\r\n      data.empPosition.toLowerCase ().includes (empPosition.toLowerCase ()) &&\r\n      data.empBranch.toLowerCase ().includes (empBranch.toLowerCase ()) &&\r\n      data.empStatePosition === empStatePosition\r\n  );\r\n};\r\n\r\n// add new data\r\nexport const addData = (field, dataArr) => {\r\n  const newData = [...dataArr, field];\r\n  return newData;\r\n};\r\n\r\n// modify existed data\r\nexport const editData = (field, dataArr) => {\r\n  let newData = [...dataArr];\r\n  newData.forEach ((data, index, newData) => {\r\n    if (data.Id === field.Id) newData[index] = field;\r\n  });\r\n  return newData;\r\n};\r\n\r\n// delete data field\r\nexport const deleteData = (field, dataArr) => {\r\n  const index = dataArr.findIndex (item => item.Id === field.Id);\r\n  const newData = [\r\n    ...dataArr.slice (0, index),\r\n    ...dataArr.slice (index + 1, dataArr.length),\r\n  ];\r\n  return newData;\r\n};\r\n","export const convertDateString = dateData =>\r\n  new Date (dateData).toLocaleDateString ();\r\n","import {\r\n  Col,\r\n  Form,\r\n  Input,\r\n  Modal,\r\n  Row,\r\n  Select,\r\n  Tabs,\r\n  Tooltip,\r\n  DatePicker,\r\n  Typography,\r\n  InputNumber,\r\n  Button,\r\n} from 'antd';\r\nimport React, {useState, useEffect} from 'react';\r\nimport styled from 'styled-components';\r\nimport {actionLabels, actionTypes} from './../../../constant/tableActions';\r\nimport moment from 'moment';\r\nimport './style.scss';\r\nimport {newFormState, initialDataForm} from '../../../recoil/formState';\r\nimport {useRecoilValue, useRecoilState} from 'recoil';\r\nimport {listDateFormat} from '../../../constant/formFields';\r\nimport {dataState, addData, editData} from '../../../recoil/dataState';\r\nimport {convertDateString} from '../../../utils/convertDateString';\r\n\r\nconst {TabPane} = Tabs;\r\nconst {Item} = Form;\r\nconst {Option} = Select;\r\nconst {Text} = Typography;\r\n\r\nconst StyledModal = styled (Modal)`\r\n.ant-modal-header {\r\n  background-color: #7dbcea!important;\r\n  }\r\n  .ant-modal-title {\r\n    color: #FFF!important;\r\n  },\r\n.ant-modal-close-x {\r\n  color: #FFF!important;\r\n}\r\n.modal-footer {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.modal-footer button {\r\n  padding: 1rem;\r\n  background: #7dbcea;\r\n  outline: none;\r\n    border: none;\r\n    line-height: 5px;\r\n    border-radius: 7px;\r\n  }\r\n  `;\r\n\r\nconst formLayout = {\r\n  labelCol: {span: 8},\r\n  wrapperCol: {span: 16},\r\n};\r\n\r\nconst validateMessage = {\r\n  required: '${label} is required',\r\n  types: {\r\n    email: '${label} is invalid',\r\n    number: '${label} is invalid!',\r\n  },\r\n};\r\n\r\nconst TableModalWrapper = props => {\r\n  const {actionType, isShowModal, closeModal} = props;\r\n  const [formState, setFormState] = useRecoilState (newFormState);\r\n  const [form] = Form.useForm ();\r\n  const [dataStorageState, setDataStorageState] = useRecoilState (dataState);\r\n\r\n  useEffect (\r\n    () => {\r\n      form.setFieldsValue (formState);\r\n    },\r\n    [formState]\r\n  );\r\n\r\n  const onFormFinish = values => {\r\n    let {Id, idCard, dob, dateIssue} = values;\r\n    values.dob = convertDateString (dob);\r\n    values.dateIssue = convertDateString (dateIssue);\r\n    if (actionType === actionTypes.ADD || actionType === actionTypes.COPY) {\r\n      let existingValue = dataStorageState.find (\r\n        data => data.Id === Id || data.idCard == idCard\r\n      );\r\n      if (existingValue) {\r\n        Modal.error ({\r\n          title: 'Lỗi',\r\n          content: 'ID or CMND is existed',\r\n        });\r\n        return;\r\n      } else if (idCard.toString ().length > 9) {\r\n        Modal.error ({\r\n          title: 'Lỗi',\r\n          content: 'CMND more than 9 digits',\r\n        });\r\n        return;\r\n      }\r\n      const newData = addData (values, dataStorageState);\r\n      setDataStorageState (newData);\r\n    } else {\r\n      const newData = editData (values, dataStorageState);\r\n      setDataStorageState (newData);\r\n    }\r\n    handleCancel ();\r\n  };\r\n\r\n  const handleOk = e => {\r\n    closeModal ();\r\n  };\r\n\r\n  const handleCancel = e => {\r\n    closeModal ();\r\n  };\r\n\r\n  const handleRenew = () => {\r\n    form.setFieldsValue (initialDataForm);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <StyledModal\r\n        destroyOnClose={true}\r\n        title={actionLabels[actionType]}\r\n        visible={isShowModal}\r\n        onOk={() => handleOk ()}\r\n        onCancel={() => handleCancel ()}\r\n        className=\"action_modal\"\r\n        width=\"50%\"\r\n        footer={null}\r\n      >\r\n        <Tabs defaultActiveKey=\"1\" type=\"card\" color=\"#1a1a1a\">\r\n          <TabPane tab=\"Thông tin chung\" key=\"1\">\r\n            <Form\r\n              {...formLayout}\r\n              form={form}\r\n              onFinish={onFormFinish}\r\n              name=\"emp__form\"\r\n              validateMessages={validateMessage}\r\n            >\r\n              <Row gutter={5}>\r\n                <Col span={12}>\r\n                  <Item\r\n                    name=\"Id\"\r\n                    label=\"Mã nhân viên\"\r\n                    rules={[{required: true}]}\r\n                    initialValue={formState[`Id`]}\r\n                    labelAlign=\"left\"\r\n                  >\r\n                    <Input\r\n                      disabled={actionType === actionTypes.EDIT ? true : false}\r\n                    />\r\n                  </Item>\r\n                  <Item\r\n                    label=\"Chi nhánh\"\r\n                    name=\"empBranch\"\r\n                    labelAlign=\"left\"\r\n                    initialValue={\r\n                      formState[`empBranch`] ? formState[`empBranch`] : 'HCM'\r\n                    }\r\n                  >\r\n                    <Select style={{width: '100%'}}>\r\n                      <Option value=\"HCM\">Chi nhánh Hồ Chí Minh</Option>\r\n                      <Option value=\"HN\">Chi nhánh Hà Nội</Option>\r\n                      <Option value=\"DN\">Chi nhánh Đà Nẵng</Option>\r\n                    </Select>\r\n                  </Item>\r\n                  <Item\r\n                    label=\"Giới tính\"\r\n                    name=\"gender\"\r\n                    labelAlign=\"left\"\r\n                    initialValue={\r\n                      formState[`gender`] ? formState[`gender`] : 'Nam'\r\n                    }\r\n                  >\r\n                    <Select style={{width: '100%'}}>\r\n                      <Option value=\"Nam\">Nam</Option>\r\n                      <Option value=\"Nữ\">Nữ</Option>\r\n                    </Select>\r\n                  </Item>\r\n                  <Item\r\n                    label=\"Số điện thoại\"\r\n                    name=\"phonenumber\"\r\n                    rules={[{type: 'number'}]}\r\n                    initialValue={+formState[`phonenumber`]}\r\n                    labelAlign=\"left\"\r\n                  >\r\n                    <InputNumber style={{width: '100%'}} />\r\n                  </Item>\r\n                  <Item\r\n                    label=\"Ngày cấp\"\r\n                    name=\"dateIssue\"\r\n                    rules={[{required: true}]}\r\n                    initialValue={\r\n                      formState[`dateIssue`] &&\r\n                        moment (formState[`dateIssue`], listDateFormat[2])\r\n                    }\r\n                    labelAlign=\"left\"\r\n                  >\r\n                    <DatePicker\r\n                      style={{width: '100%'}}\r\n                      format={listDateFormat[2]}\r\n                    />\r\n                  </Item>\r\n                  <Item\r\n                    name=\"address\"\r\n                    label=\"Địa chỉ\"\r\n                    labelAlign=\"left\"\r\n                    initialValue={formState[`address`]}\r\n                  >\r\n                    <Input />\r\n                  </Item>\r\n                  <Item\r\n                    label=\"Khu vực\"\r\n                    name=\"area\"\r\n                    labelAlign=\"left\"\r\n                    initialValue={formState[`area`] ? formState[`area`] : '1'}\r\n                  >\r\n                    <Select style={{width: '100%'}}>\r\n                      <Option value=\"1\">Khu vực 1</Option>\r\n                      <Option value=\"2\">Khu vực 2</Option>\r\n                      <Option value=\"3\">Khu vực 3</Option>\r\n                    </Select>\r\n                  </Item>\r\n                  <Item\r\n                    label=\"Ghi chú\"\r\n                    name=\"note\"\r\n                    labelAlign=\"left\"\r\n                    initialValue={formState[`note`] ? formState[`note`] : ''}\r\n                  >\r\n                    <Input.TextArea rows={2} />\r\n                  </Item>\r\n                </Col>\r\n                <Col span={12}>\r\n                  <Item\r\n                    name=\"empName\"\r\n                    label=\"Tên nhân viên\"\r\n                    rules={[{required: true}]}\r\n                    initialValue={formState[`empName`]}\r\n                    labelAlign=\"left\"\r\n                  >\r\n                    <Input />\r\n                  </Item>\r\n                  <Item\r\n                    label=\"Ngày sinh\"\r\n                    name=\"dob\"\r\n                    labelAlign=\"left\"\r\n                    initialValue={\r\n                      formState[`dob`] &&\r\n                        moment (formState[`dob`], listDateFormat[2])\r\n                    }\r\n                  >\r\n                    <DatePicker\r\n                      style={{width: '100%'}}\r\n                      format={listDateFormat[2]}\r\n                    />\r\n                  </Item>\r\n                  <Item\r\n                    label=\"Chức vụ\"\r\n                    name=\"empPosition\"\r\n                    labelAlign=\"left\"\r\n                    initialValue={\r\n                      formState[`empPosition`]\r\n                        ? formState[`empPosition`]\r\n                        : 'Thu ngân'\r\n                    }\r\n                  >\r\n                    <Select style={{width: '100%'}}>\r\n                      <Option value=\"Thu ngân\">Nhân viên thu ngân</Option>\r\n                      <Option value=\"Thư ký\">Nhân viên thư ký</Option>\r\n                      <Option value=\"Kế toán\">Nhân viên kế toán</Option>\r\n                    </Select>\r\n                  </Item>\r\n                  <Item\r\n                    name=\"empEmail\"\r\n                    label=\"Email\"\r\n                    rules={[{type: 'email'}]}\r\n                    labelAlign=\"left\"\r\n                    initialValue={\r\n                      formState[`empEmail`] ? formState[`empEmail`] : ''\r\n                    }\r\n                  >\r\n                    <Input type=\"email\" />\r\n                  </Item>\r\n                  <Item\r\n                    label=\"CMND\"\r\n                    name=\"idCard\"\r\n                    rules={[{required: true}, {type: 'number', min: 9}]}\r\n                    labelAlign=\"left\"\r\n                    initialValue={+formState[`idCard`]}\r\n                  >\r\n                    <InputNumber style={{width: '100%'}} />\r\n                  </Item>\r\n                  <Item\r\n                    name=\"placeIssue\"\r\n                    label=\"Nơi cấp\"\r\n                    rules={[{required: true}]}\r\n                    labelAlign=\"left\"\r\n                    initialValue={\r\n                      formState[`placeIssue`] ? formState[`placeIssue`] : ''\r\n                    }\r\n                  >\r\n                    <Input />\r\n                  </Item>\r\n                  <Item\r\n                    label=\"Phường xã\"\r\n                    name=\"subDistrict\"\r\n                    labelAlign=\"left\"\r\n                    initialValue={\r\n                      formState[`subDistrict`]\r\n                        ? formState[`subDistrict`]\r\n                        : 'sd1'\r\n                    }\r\n                  >\r\n                    <Select style={{width: '100%'}}>\r\n                      <Option value=\"sd1\">Phường 1</Option>\r\n                      <Option value=\"sd2\">Phường 2</Option>\r\n                      <Option value=\"sd3\">Phường 3</Option>\r\n                    </Select>\r\n                  </Item>\r\n                  <Item\r\n                    label=\"Trạng thái\"\r\n                    name=\"empStatePosition\"\r\n                    labelAlign=\"left\"\r\n                    initialValue={\r\n                      formState[`empStatePosition`]\r\n                        ? formState[`empStatePosition`]\r\n                        : 'Toàn thời gian'\r\n                    }\r\n                  >\r\n                    <Select style={{width: '100%'}}>\r\n                      <Option value=\"Thời vụ\">Nhân viên thời vụ</Option>\r\n                      <Option value=\"Toàn thời gian\">\r\n                        Nhân viên toàn thời gian\r\n                      </Option>\r\n                    </Select>\r\n                  </Item>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={24} className=\"modal-footer\">\r\n                  <Button\r\n                    type=\"primary\"\r\n                    color=\"primary\"\r\n                    style={{margin: '0 5px'}}\r\n                    htmlType=\"submit\"\r\n                  >\r\n                    Lưu\r\n                  </Button>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    color=\"primary\"\r\n                    style={{margin: '0 5px'}}\r\n                    htmlType=\"reset\"\r\n                    onClick={() => handleRenew ()}\r\n                  >\r\n                    Làm mới\r\n                  </Button>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    color=\"primary\"\r\n                    style={{margin: '0 5px'}}\r\n                    onClick={() => handleCancel ()}\r\n                  >\r\n                    Đóng\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </TabPane>\r\n        </Tabs>\r\n      </StyledModal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst TableModal = React.memo (TableModalWrapper);\r\n\r\nexport default TableModal;\r\n","import {Button, Col, Form, Input, Modal, Row, Select} from 'antd';\r\nimport React, {useState} from 'react';\r\nimport {useRecoilState, useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {\r\n  dataState,\r\n  filterData,\r\n  recoverData,\r\n  deleteData,\r\n} from '../../../recoil/dataState';\r\nimport {\r\n  selectedRowsState,\r\n  clonedDataForm,\r\n  initialDataForm,\r\n  newFormState,\r\n} from '../../../recoil/formState';\r\nimport {backUpDataState} from '../../../recoil/dataState';\r\nimport {actionTypes} from './../../../constant/tableActions';\r\nimport TableModal from './../TableModal/index';\r\nimport './style.scss';\r\n\r\n// antd components\r\nconst {Item} = Form;\r\nconst {Option} = Select;\r\n\r\nconst validateMessages = {\r\n  required: '${label} được yêu cầu điền đầy đủ',\r\n};\r\n\r\nfunction TableAction (props) {\r\n  const [sampleDataState, setSampleDataState] = useRecoilState (dataState);\r\n  const initialForm = useRecoilValue (initialDataForm);\r\n  const setNewFormStateValue = useSetRecoilState (newFormState);\r\n  //action type\r\n  const [actionTypeState, setActionTypeState] = useState (actionTypes.ADD);\r\n  const [backUpData, setBackUpData] = useRecoilState (backUpDataState);\r\n  const [searchLabel, setSearchLabel] = useState ('Tìm kiếm');\r\n  // show modal state\r\n  const [visible, setVisible] = useState (false);\r\n  //selected rows\r\n  const selectedRowsValue = useRecoilValue (selectedRowsState);\r\n  // set form action state\r\n  const closeModal = () => {\r\n    setVisible (!visible);\r\n  };\r\n\r\n  const showModal = actionType => {\r\n    if (actionType === actionTypes.EDIT || actionType === actionTypes.COPY) {\r\n      if (selectedRowsValue.length !== 1) {\r\n        Modal.error ({\r\n          title: 'Lỗi',\r\n          content: 'Bạn cần lựa chọn 1 dòng dữ liệu',\r\n        });\r\n        return;\r\n      }\r\n    }\r\n    if (actionType === actionTypes.ADD) setNewFormStateValue (initialForm);\r\n    else if (actionType === actionTypes.EDIT) {\r\n      setNewFormStateValue (selectedRowsValue[0]);\r\n    } else {\r\n      const newData = clonedDataForm (selectedRowsValue[0]);\r\n      setNewFormStateValue (newData);\r\n    }\r\n\r\n    setActionTypeState (actionType);\r\n    setVisible (!visible);\r\n  };\r\n\r\n  const handleSubmit = values => {\r\n    let filteredData = [];\r\n\r\n    if (searchLabel == 'Tìm kiếm') {\r\n      let isAllowSearch = true;\r\n      for (let searchField in values) {\r\n        if (!searchField) {\r\n          isAllowSearch = false;\r\n        }\r\n      }\r\n      if (!isAllowSearch) return;\r\n      filteredData = filterData (values, sampleDataState);\r\n      setSearchLabel ('Phục hồi dữ liệu gốc');\r\n      setBackUpData (sampleDataState);\r\n      setSampleDataState (filteredData);\r\n      return;\r\n    }\r\n\r\n    setSampleDataState (backUpData);\r\n    setSearchLabel ('Tìm kiếm');\r\n  };\r\n\r\n  const deleteDataAction = () => {\r\n    if (selectedRowsValue.length !== 1) {\r\n      Modal.error ({\r\n        title: 'Lỗi',\r\n        content: 'Bạn có thể lựa chọn một hoặc nhiều dòng dữ liệu để xoá',\r\n      });\r\n      return;\r\n    }\r\n    const newData = deleteData (selectedRowsValue[0], sampleDataState);\r\n    setSampleDataState (newData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"action__wrapper\">\r\n      <div className=\"modal\">\r\n        <TableModal\r\n          actionType={actionTypeState}\r\n          isShowModal={visible}\r\n          closeModal={closeModal}\r\n        />\r\n      </div>\r\n      <Form\r\n        name=\"search\"\r\n        initialValues={{remember: true}}\r\n        className=\"search__form\"\r\n        validateMessages={validateMessages}\r\n        onFinish={handleSubmit}\r\n      >\r\n        <div className=\"search__wrapper\">\r\n          <Row gutter={5}>\r\n            <Col span={6}>\r\n              <Item name=\"empName\" label=\"Nhân viên\" rules={[{required: true}]}>\r\n                <Input\r\n                  name=\"empName\"\r\n                  disabled={\r\n                    searchLabel == 'Phục hồi dữ liệu gốc' ? true : false\r\n                  }\r\n                />\r\n              </Item>\r\n              <Item\r\n                name=\"empPosition\"\r\n                label=\"Chức vụ\"\r\n                rules={[{required: true}]}\r\n              >\r\n                <Input\r\n                  name=\"empPosition\"\r\n                  disabled={\r\n                    searchLabel == 'Phục hồi dữ liệu gốc' ? true : false\r\n                  }\r\n                />\r\n              </Item>\r\n            </Col>\r\n            <Col span={6}>\r\n              <Item\r\n                name=\"empBranch\"\r\n                label=\"Chi nhánh\"\r\n                rules={[{required: true}]}\r\n              >\r\n                <Input\r\n                  name=\"empBranch\"\r\n                  disabled={\r\n                    searchLabel == 'Phục hồi dữ liệu gốc' ? true : false\r\n                  }\r\n                />\r\n              </Item>\r\n              <Item\r\n                label=\"Trạng thái\"\r\n                name=\"empStatePosition\"\r\n                initialValue=\"Toàn thời gian\"\r\n              >\r\n                <Select size=\"large\" style={{width: '100%'}}>\r\n                  <Option value=\"Toàn thời gian\">\r\n                    Nhân viên toàn thời gian\r\n                  </Option>\r\n                  <Option value=\"Thời vụ\">Nhân viên thời vụ</Option>\r\n                </Select>\r\n              </Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <div className=\"action__buttons\">\r\n          <Button\r\n            htmlType=\"submit\"\r\n            shape=\"round\"\r\n            type=\"primary\"\r\n            size=\"middle\"\r\n            style={props.buttonStyle}\r\n          >\r\n            {searchLabel}\r\n          </Button>\r\n          <Button\r\n            shape=\"round\"\r\n            type=\"primary\"\r\n            size=\"middle\"\r\n            style={props.buttonStyle}\r\n            onClick={() => showModal (actionTypes.ADD)}\r\n          >\r\n            Thêm\r\n          </Button>\r\n          <Button\r\n            shape=\"round\"\r\n            type=\"primary\"\r\n            size=\"middle\"\r\n            style={props.buttonStyle}\r\n            onClick={() => showModal (actionTypes.COPY)}\r\n          >\r\n            Sao chép\r\n          </Button>\r\n          <Button\r\n            shape=\"round\"\r\n            type=\"primary\"\r\n            size=\"middle\"\r\n            style={props.buttonStyle}\r\n            onClick={() => showModal (actionTypes.EDIT)}\r\n          >\r\n            Chỉnh sửa\r\n          </Button>\r\n          <Button\r\n            shape=\"round\"\r\n            type=\"primary\"\r\n            size=\"middle\"\r\n            style={props.buttonStyle}\r\n            onClick={() => deleteDataAction ()}\r\n          >\r\n            Xoá\r\n          </Button>\r\n          <Button\r\n            shape=\"round\"\r\n            type=\"primary\"\r\n            size=\"middle\"\r\n            style={props.buttonStyle}\r\n          >\r\n            Xuất File\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo (TableAction);\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport TitleSection from '../../../components/TitleSection';\r\nimport TableContent from './../TableContent/index';\r\nimport TableAction from '../TableActions';\r\nimport './style.scss';\r\nimport {dataState} from '../../../recoil/dataState';\r\n\r\nfunction EmpRightBody () {\r\n  // load data from local storage\r\n  const loadDb = useRecoilValue (dataState);\r\n  const [sampleData, setSampleData] = useState (loadDb);\r\n  // get sample data from local storage\r\n  useEffect (\r\n    () => {\r\n      setSampleData (loadDb);\r\n    },\r\n    [loadDb]\r\n  );\r\n  return (\r\n    <div className=\"emp__content--right-side\">\r\n      <div className=\"emp__content--inner\">\r\n        <TitleSection\r\n          fontSize=\"12px\"\r\n          padding=\".5rem .5rem\"\r\n          color=\"#FFFF\"\r\n          backgroundColor=\"#7dbcea\"\r\n          borderRadius=\"8px\"\r\n        >\r\n          Quản lý nhân viên\r\n        </TitleSection>\r\n        <TableAction\r\n          buttonStyle={{\r\n            backgroundColor: '#7dbcea',\r\n            borderColor: '#7dbcea',\r\n            borderRadius: '5px',\r\n          }}\r\n        />\r\n        <TableContent data={sampleData} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmpRightBody;\r\n","import React from 'react';\r\nimport './style.scss';\r\nimport {PageHeader} from 'antd';\r\nimport TitleSection from '../TitleSection';\r\n\r\nfunction Navbar () {\r\n  return (\r\n    <TitleSection\r\n      fontSize=\"20px\"\r\n      padding=\".3rem 1rem\"\r\n      color=\"#FFF\"\r\n      backgroundColor=\"#7dbcea\"\r\n      borderRadius=\"8px\"\r\n    >\r\n      Tổng quan\r\n    </TitleSection>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import {Col, Layout, Row, Menu} from 'antd';\r\nimport React from 'react';\r\nimport EmpLeftBody from '../../components/EmpLeftBody';\r\nimport EmpRightBody from '../../components/EmpRightBody';\r\nimport Navbar from '../../../components/Navbar';\r\nimport './style.scss';\r\nconst {Header, Content} = Layout;\r\nfunction Employee () {\r\n  return (\r\n    <Layout className=\"emp__wrapper layout\">\r\n      <Header className=\"emp__header\">\r\n        <Menu>\r\n          <Navbar />\r\n        </Menu>\r\n      </Header>\r\n      <Content className=\"emp__body\">\r\n        <Row className=\"emp__body--layout\">\r\n          <Col flex={1}>\r\n            <EmpLeftBody />\r\n          </Col>\r\n          <Col flex={2}>\r\n            <EmpRightBody />\r\n          </Col>\r\n        </Row>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n}\r\nexport default Employee;\r\n","import React, {useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Employee from './features/pages/Employee';\nimport * as sampleData from './data.json';\nfunction getSampleData () {\n  const sampleDataFromLC = localStorage.getItem ('sampleData');\n  if (sampleDataFromLC) return;\n  localStorage.setItem ('sampleData', JSON.stringify (sampleData));\n}\n\nfunction App () {\n  useEffect (() => {\n    getSampleData ();\n  }, []);\n  return (\n    <div className=\"App\">\n      <Employee />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import built-in antd design styles\nimport 'antd/dist/antd.css';\nimport {RecoilRoot} from 'recoil';\n\nReactDOM.render (\n  <RecoilRoot><App /></RecoilRoot>,\n  document.getElementById ('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister ();\n","export const dataForm = {\r\n  Id: '',\r\n  empBranch: '',\r\n  gender: '',\r\n  phonenumber: '',\r\n  dateIssue: '',\r\n  address: '',\r\n  area: '',\r\n  note: '',\r\n  empName: '',\r\n  dob: '',\r\n  empPosition: '',\r\n  empEmail: '',\r\n  idCard: '',\r\n  placeIssue: '',\r\n  subDistrict: '',\r\n  empStatePosition: '',\r\n};\r\n\r\n// exclude some fields of data clone\r\nexport const excludeField = [\r\n  'Id',\r\n  'key',\r\n  'empName',\r\n  'idCard',\r\n  'gender',\r\n  'email',\r\n  'phonenumber',\r\n  'dateIssue',\r\n  'address',\r\n];\r\n\r\n// form column initial\r\nexport const columns = [\r\n  {\r\n    title: '#',\r\n    dataIndex: 'key',\r\n  },\r\n  {\r\n    title: 'Mã nhân viên',\r\n    dataIndex: 'Id',\r\n  },\r\n  {\r\n    title: 'Tên nhân viên',\r\n    dataIndex: 'empName',\r\n  },\r\n  {\r\n    title: 'Chi nhánh',\r\n    dataIndex: 'empBranch',\r\n  },\r\n  {\r\n    title: 'Chức vụ',\r\n    dataIndex: 'empPosition',\r\n  },\r\n  {\r\n    title: 'CMND',\r\n    dataIndex: 'idCard',\r\n  },\r\n  {\r\n    title: 'Ngày sinh',\r\n    dataIndex: 'dob',\r\n  },\r\n  {\r\n    title: 'Email',\r\n    dataIndex: 'empEmail',\r\n  },\r\n  {\r\n    title: 'Số điện thoại',\r\n    dataIndex: 'phonenumber',\r\n  },\r\n  {\r\n    title: 'Trạng thái',\r\n    dataIndex: 'empStatePosition',\r\n  },\r\n  {\r\n    title: 'Địa chỉ',\r\n    dataIndex: 'address',\r\n  },\r\n];\r\n\r\nexport const listDateFormat = ['DD/MM/YYYY', 'DD/MM/YY', 'MM/DD/YYYY'];\r\n"],"sourceRoot":""}